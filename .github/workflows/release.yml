name: Release

on:
  push:
    tags:
      - 'v*'  # Only trigger on version tags (v1.0.0, v2.1.3, etc.)
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # For creating releases
  packages: write  # For pushing to GitHub Container Registry

env:
  GO_VERSION: '1.25'

jobs:
  build-binaries:
    name: Build Linux Binaries (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

    - name: Set up Go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build
      env:
        GOOS: linux
        GOARCH: ${{ matrix.arch }}
      run: |
        CGO_ENABLED=0 go build -ldflags="-s -w" -o miniflux-luma
        upx --best -q miniflux-luma
        
        mkdir -p release
        mv miniflux-luma "release/miniflux-luma-linux-${{ matrix.arch }}"

    - name: Upload Artifacts
      uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
      with:
        name: binaries-${{ matrix.arch }}
        path: release/
        if-no-files-found: error
        retention-days: 1

  create-release:
    name: Create Release
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@abefc31eafcfbdf6c5336127c1346fdae79ff41c
      with:
        name: binaries-amd64
        path: release/
    
    - name: Download ARM64 Artifact
      uses: actions/download-artifact@abefc31eafcfbdf6c5336127c1346fdae79ff41c
      with:
        name: binaries-arm64
        path: release/

    - name: Create Release
      uses: softprops/action-gh-release@19cd0bcd2b95a5f9e0aab8377b3cae33e51c2234
      with:
        files: release/*
        generate_release_notes: true
        draft: false
        prerelease: false

  docker:
    name: Build and Push Docker Image
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@1583c0f09d26c58c59d25b0eef29792b7ce99d9a

    - name: Login to GitHub Container Registry
      uses: docker/login-action@65c0768122147b63190ddda25aa21f81640cf5f3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@032a4b3bda1b716928481836ac5bfe36e1feaad6
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=long

    - name: Build and push Docker image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
